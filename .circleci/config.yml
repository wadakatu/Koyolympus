version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1.4

executors:
  php:
    docker:
      - image: cimg/php:8.1.12
  php-mysql:
    docker:
      - image: cimg/php:8.1.12
      - image: cimg/mysql:5.7
  php-node:
    docker:
      - image: cimg/php:8.1.12-node
  ubuntu:
    machine:
      image: ubuntu-2004:202201-02

jobs:
  build:
    working_directory: ~/koyolympus
    executor:
      name: php-node
    steps:
      - checkout
      - restore_cache:
          name: restore cache for node
          keys:
            - npm-cache-v1-{{ checksum "koyolympus/package-lock.json" }}
      - restore_cache:
          name: restore cache for composer
          keys:
            - composer-cache-v1-{{ checksum "koyolympus/composer.lock" }}
      - run:
          name: npm install
          command: |
            DIR_NODE='./koyolympus/node_modules'
            if [ -d "${DIR_NODE}" ]; then
                echo "[node_modules] directory is already exist, so [npm install] does not run."
            else
                npm --prefix koyolympus install koyolympus
            fi
      - run:
          name: composer install
          command: |
            DIR_COMPOSER='./koyolympus/vendor'
            if [ -d "${DIR_COMPOSER}" ]; then
                echo "[vendor] directory is already exist, so [composer install] does not run."
            else
                composer install -n --prefer-dist --working-dir=./koyolympus
            fi
      - save_cache:
          name: save_cache_node
          key: npm-cache-v1-{{ checksum "koyolympus/package-lock.json"}}
          paths:
            - koyolympus/node_modules
      - save_cache:
          name: save_cache_composer
          paths:
            - koyolympus/vendor
          key: composer-cache-v1-{{ checksum "koyolympus/composer.json" }}
      - run:
          name: npm run production
          working_directory: koyolympus
          command: npm run prod
      - persist_to_workspace:
          name: prepare to pass folders.
          root: koyolympus/
          paths:
            - node_modules/
            - vendor/

  style-check:
    executor:
      name: php
    steps:
      - checkout
      - attach_workspace:
          at: koyolympus/
      - run:
          name: check PHP code style (PSR12)
          working_directory: koyolympus
          command: vendor/bin/phpcs --standard=phpcs.xml -p ./

  larastan:
    executor:
      name: php
    steps:
      - checkout
      - attach_workspace:
          at: koyolympus/
      - run:
          name: analyze php code statically
          working_directory: koyolympus
          command: vendor/bin/phpstan analyse

  phpunit:
    executor:
      name: php-mysql
    environment:
      - DB_CONNECTION: circle_testing
    steps:
      - checkout
      - run:
          name: Update apt-get
          command: sudo apt-get update
      - run:
          name: install wget git unzip etc...
          command: sudo apt-get install -y wget git unzip libpq-dev libfreetype6-dev libjpeg-dev libpng-dev
      - run:
          name: install pcov
          command: |
            sudo pecl install pcov
      - attach_workspace:
          at: koyolympus/
      - run:
          name: Show PHPUnit Test List
          command: koyolympus/vendor/bin/phpunit --list-tests koyolympus/tests/Unit/
      - run:
          name: prepare .env.testing
          command: |
            echo "APP_KEY=" > .env.testing
            echo CC_TEST_REPORTER_ID=$CC_TEST_REPORTER_ID > .env.testing
      - run:
          name: generate app_key
          command: php artisan key:generate --env=testing
          working_directory: koyolympus
      - run:
          name: config cache
          command: php artisan config:cache
          working_directory: koyolympus
      - run:
          name: migration
          command: php artisan migrate --env=testing
          working_directory: koyolympus
      - run:
          name: setup Code Climate test-reporter
          working_directory: koyolympus
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: run PHPUnit
          working_directory: koyolympus
          command: |
            ./cc-test-reporter before-build
            vendor/bin/phpunit --coverage-clover clover.xml
            ./cc-test-reporter format-coverage clover.xml --add-prefix koyolympus -t clover -o codeclimate.json
            ./cc-test-reporter upload-coverage -i codeclimate.json
  jest:
    executor:
      name: php-node
    steps:
      - checkout
      - run:
          name: check npm
          command: npm -v
      - attach_workspace:
          at: koyolympus/
      - run:
          name: run jest
          working_directory: koyolympus
          command: node_modules/jest/bin/jest.js

  deploy:
    executor:
      name: ubuntu
    steps:
      - aws-cli/assume-role-with-web-identity:
          role-arn: ${AWS_ROLE_ARN}
      - run:
          name: authorize-security-group
          command: |
            MY_IP=`curl -f -s ifconfig.me`
            aws ec2 authorize-security-group-ingress --region ${AWS_REGION} \
            --group-id ${DEPLOY_SG_ID} --protocol tcp --port 22 --cidr ${MY_IP}/32
      - run:
          name: deploy
          command: |
            ssh ${USER_NAME}@${HOST_NAME} 'sh -s' < .circleci/remote.sh ${CIRCLE_TAG}
      - run:
          name: revoke-security-group
          command: |
            MY_IP=`curl -f -s ifconfig.me`
            aws ec2 revoke-security-group-ingress --region ${AWS_REGION} \
            --group-id  ${DEPLOY_SG_ID} --protocol tcp --port 22 --cidr ${MY_IP}/32

workflows:
  version: 2
  build_to_deploy:
    jobs:
      - build:
          context: koyolympus
          filters:
            tags:
              only: /.*/
      - style-check:
          context: koyolympus
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - larastan:
          context: koyolympus
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - phpunit:
          context: koyolympus
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - jest:
          context: koyolympus
          requires:
            - build
          filters:
            tags:
              only: /.*/
      - approval:
          type: approval
          requires:
            - build
            - style-check
            - larastan
            - phpunit
            - jest
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
      - deploy:
          context: koyolympus
          requires:
            - approval
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
